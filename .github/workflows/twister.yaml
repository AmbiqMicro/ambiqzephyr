name: Run tests with twister

on:
  push:
    branches:
      - main
      - v*-branch
      - collab-*
  pull_request:
    branches:
      - main
      - v*-branch
      - collab-*
      - apollo510-*
  schedule:
    # Run at 02:00 UTC on every Sunday
    - cron: '0 2 * * 0'

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  twister-build-prep:
    runs-on: ubuntu-latest
    outputs:
      subset: ${{ steps.output-services.outputs.subset }}
      size: ${{ steps.output-services.outputs.size }}
      fullrun: ${{ steps.output-services.outputs.fullrun }}
    env:
      MATRIX_SIZE: 20
      PUSH_MATRIX_SIZE: 25
      WEEKLY_MATRIX_SIZE: 30
      TESTS_PER_BUILDER: 200
      FIXED_MATRIX_SIZE: 20
      COMMIT_RANGE: ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}
      BASE_REF: ${{ github.event.pull_request.base.ref }}
    steps:
      - name: Checkout
        if: github.event_name == 'pull_request'
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
          path: zephyr
          persist-credentials: false

      - name: Set up Python
        if: github.event_name == 'pull_request'
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: 3.12
          cache: pip
          cache-dependency-path: scripts/requirements-actions.txt

      - name: install-packages
        working-directory: zephyr
        if: github.event_name == 'pull_request'
        run: |
          pip install --user west
          pip install -r scripts/requirements-actions.txt --require-hashes
          pip install -r scripts/requirements.txt

          export PATH=$HOME/.local/bin:$PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH

          echo "PATH is $PATH"
          pip show west
          which west
          west --version

      - name: Setup Zephyr project
        if: github.event_name == 'pull_request'
        uses: zephyrproject-rtos/action-zephyr-setup@b2453c72966ee67b1433be22b250348d48283286 # v1.0.7
        with:
          app-path: zephyr
          toolchains: all

      - name: Environment Setup
        working-directory: zephyr
        if: github.event_name == 'pull_request'
        run: |
          git config --global user.email "bot@zephyrproject.org"
          git config --global user.name "Zephyr Bot"
          rm -fr ".git/rebase-apply"
          rm -fr ".git/rebase-merge"
          git rebase origin/${BASE_REF}
          git clean -f -d
          git log  --pretty=oneline | head -n 10

          # west setup
          west init -l . || true
          west config manifest.group-filter -- +ci,+optional
          west config --global update.narrow true
          west update || (rm -rf ../modules ../bootloader ../tools && west update)

          west forall -c 'git reset --hard HEAD'

          echo "ZEPHYR_SDK_INSTALL_DIR=/opt/toolchains/zephyr-sdk-0.16.5" >> $GITHUB_ENV

      - name: Set Zephyr SDK environment variables
        run: |
          echo "ZEPHYR_SDK_INSTALL_DIR=$HOME/zephyr-sdk" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$HOME/zephyr-sdk" >> $GITHUB_ENV

      - name: Generate Test Plan with Twister
        working-directory: zephyr
        if: github.event_name == 'pull_request'
        id: test-plan
        run: |
          export ZEPHYR_BASE=${PWD}
          export ZEPHYR_TOOLCHAIN_VARIANT=zephyr
          python3 ./scripts/ci/test_plan.py -c origin/${BASE_REF}.. --no-detailed-test-id --pull-request -t $TESTS_PER_BUILDER -p apollo510_eb -p apollo510_evb -T samples/hello_world

          TWISTER_NODES=$FIXED_MATRIX_SIZE

          echo "TWISTER_NODES=$TWISTER_NODES"
          echo "TWISTER_NODES=${TWISTER_NODES}" >> $GITHUB_ENV
          echo "TWISTER_NODES=${TWISTER_NODES}" >> $GITHUB_OUTPUT

          rm -f testplan.json .testplan

      - name: Determine matrix size
        id: output-services
        run: |
          RAW_NODES="${{ steps.test-plan.outputs.TWISTER_NODES }}"
          MATRIX_LIMIT=${{ env.MATRIX_SIZE }}

          if [[ -z "$RAW_NODES" || "$RAW_NODES" -eq 0 ]]; then
            echo "No tests to run."
            echo "subset=[]" >> $GITHUB_OUTPUT
            echo "size=0" >> $GITHUB_OUTPUT
            echo "fullrun=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          if (( RAW_NODES > MATRIX_LIMIT )); then
            TWISTER_NODES=$MATRIX_LIMIT
          else
            TWISTER_NODES=$RAW_NODES
          fi

          subset="[$(seq -s',' 1 ${TWISTER_NODES})]"
          echo "subset=${subset}" >> $GITHUB_OUTPUT
          echo "size=${TWISTER_NODES}" >> $GITHUB_OUTPUT
          echo "fullrun=${TWISTER_FULL}" >> $GITHUB_OUTPUT

          echo "ðŸ’¡ TWISTER_NODES (capped by MATRIX_SIZE): $TWISTER_NODES"
          echo "ðŸ§ª Subset: $subset"

  twister-build:
    runs-on: ubuntu-latest
    needs: twister-build-prep
    if: needs.twister-build-prep.outputs.size != 0
    strategy:
      fail-fast: false
      matrix:
        subset: ${{fromJSON(needs.twister-build-prep.outputs.subset)}}
    timeout-minutes: 1440
    env:
      CCACHE_DIR: $HOME/.cache/ccache-zephyr
      CCACHE_REMOTE_STORAGE: "redis://cache-*.keydb-cache.svc.cluster.local|shards=1,2,3"
      CCACHE_REMOTE_ONLY: "true"
      # --specs is ignored because ccache is unable to resolve the toolchain specs file path.
      CCACHE_IGNOREOPTIONS: '-specs=* --specs=*'
      TWISTER_COMMON: ' --test-config tests/test_config_ci.yaml --no-detailed-test-id --force-color --inline-logs -v -N -M --retry-failed 3 --timeout-multiplier 2 '
      WEEKLY_OPTIONS: ' -M --build-only --all --show-footprint --report-filtered -j 32'
      PR_OPTIONS: ' --clobber-output --integration -j 16'
      PUSH_OPTIONS: ' --clobber-output -M --show-footprint --report-filtered -j 16'
      COMMIT_RANGE: ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}
      BASE_REF: ${{ github.event.pull_request.base.ref }}
      LLVM_TOOLCHAIN_PATH: /usr/lib/llvm-20
      TARGET_PLATFORMS: "apollo510_eb apollo510_evb"
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
          persist-credentials: false

      - name: Clean up disk space before build
        run: |
          echo "Before cleanup:"
          df -h

          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /usr/share/swift
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/hostedtoolcache/
          sudo rm -rf /usr/lib/jvm
          sudo rm -rf /usr/lib/google-cloud-sdk
          sudo apt-get clean
          sudo apt-get autoremove -y

          echo "After cleanup:"
          df -h

      - name: Install Zephyr SDK
        run: |
          wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.16.5/zephyr-sdk-0.16.5_linux-x86_64.tar.xz
          tar xf zephyr-sdk-0.16.5_linux-x86_64.tar.xz
          mv zephyr-sdk-0.16.5 $HOME/zephyr-sdk
          $HOME/zephyr-sdk/setup.sh -t all -c

      - name: Set Zephyr SDK environment variables
        run: |
          echo "ZEPHYR_SDK_INSTALL_DIR=$HOME/zephyr-sdk" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$HOME/zephyr-sdk" >> $GITHUB_ENV
          echo "$HOME/zephyr-sdk/cmake" >> $GITHUB_PATH

      - name: Install Python packages
        run: |
          pip install --user west
          pip install -r scripts/requirements-actions.txt
          pip install -r scripts/requirements.txt
          pip install protobuf grpcio-tools
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Environment Setup
        run: |
          set -euo pipefail

          export ZEPHYR_BASE=${PWD}

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git config --global user.email "bot@zephyrproject.org"
            git config --global user.name "Zephyr Builder"
            rm -fr ".git/rebase-apply" ".git/rebase-merge"
            git fetch origin ${BASE_REF}

            if ! git rebase origin/${BASE_REF}; then
              echo "Rebase failed, aborting..."
              git rebase --abort
              exit 1
            fi

            git clean -f -d
            git log --pretty=oneline | head -n 10 || true
          fi

          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

          echo "Initializing west..."
          if [ ! -d .west ]; then
            west init -l .
          else
            echo "West already initialized."
          fi

          west config manifest.group-filter -- +zephyr_default,+ci,+optional
          if ! west update; then
            echo "west update failed, retrying after cleaning modules"
            rm -rf modules/ bootloader/ tools/
            west update
          fi

          west list

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache gcc-multilib device-tree-compiler gperf protobuf-compiler

      - name: Set up ccache
        run: |
          mkdir -p ${CCACHE_DIR}
          ccache -M 10G
          ccache -p
          ccache -z -s -vv

      - name: Check Environment
        run: |
          cmake --version
          gcc --version
          cargo --version
          rustup target list --installed
          ls -la
          echo "github.ref: ${{ github.ref }}"
          echo "github.base_ref: ${{ github.base_ref }}"
          echo "github.ref_name: ${{ github.ref_name }}"

      - if: github.event_name == 'push'
        name: Run Tests with Twister (Push)
        id: run_twister
        run: |
          set -euo pipefail
          export ZEPHYR_BASE=${PWD}
          export ZEPHYR_TOOLCHAIN_VARIANT=zephyr
          export ZEPHYR_SDK_INSTALL_DIR=$HOME/zephyr-sdk

          ./scripts/twister $(for p in $TARGET_PLATFORMS; do echo -n "-p $p "; done) \
            --subset ${{ matrix.subset }}/${{ strategy.job-total }} \
            ${TWISTER_COMMON} ${PUSH_OPTIONS}

          if [[ "${{ matrix.subset }}" == "1" ]]; then
            ./scripts/zephyr_module.py --twister-out module_tests.args
            if [ -s module_tests.args ]; then
              ./scripts/twister $(for p in $TARGET_PLATFORMS; do echo -n "-p $p "; done) +module_tests.args --outdir module_tests ${TWISTER_COMMON} ${PUSH_OPTIONS}
            fi
          fi

      - if: github.event_name == 'pull_request'
        name: Run Tests with Twister (Pull Request)
        id: run_twister_pr
        run: |
          set -euo pipefail
          rm -rf twister-out module_tests testplan.json
          export ZEPHYR_BASE=${PWD}
          export ZEPHYR_TOOLCHAIN_VARIANT=zephyr
          export ZEPHYR_SDK_INSTALL_DIR=$HOME/zephyr-sdk

          python3 ./scripts/ci/test_plan.py -c origin/${BASE_REF}.. --pull-request --no-detailed-test-id $(for p in $TARGET_PLATFORMS; do echo -n "-p $p "; done)

          ./scripts/twister $(for p in $TARGET_PLATFORMS; do echo -n "-p $p "; done) \
            --subset ${{ matrix.subset }}/${{ strategy.job-total }} \
            --load-tests testplan.json ${TWISTER_COMMON} ${PR_OPTIONS}

          if [[ "${{ matrix.subset }}" == "1" ]] && [ "${{ needs.twister-build-prep.outputs.fullrun }}" = "True" ]; then
            ./scripts/zephyr_module.py --twister-out module_tests.args
            if [ -s module_tests.args ]; then
              ./scripts/twister $(for p in $TARGET_PLATFORMS; do echo -n "-p $p "; done) +module_tests.args --outdir module_tests ${TWISTER_COMMON} ${PR_OPTIONS}
            fi
          fi

      - if: github.event_name == 'schedule'
        name: Run Tests with Twister (Weekly)
        id: run_twister_sched
        run: |
          set -euo pipefail
          export ZEPHYR_BASE=${PWD}
          export ZEPHYR_TOOLCHAIN_VARIANT=zephyr
          export ZEPHYR_SDK_INSTALL_DIR=$HOME/zephyr-sdk

          ./scripts/twister $(for p in $TARGET_PLATFORMS; do echo -n "-p $p "; done) \
            --subset ${{ matrix.subset }}/${{ strategy.job-total }} \
            ${TWISTER_COMMON} ${WEEKLY_OPTIONS}

          if [[ "${{ matrix.subset }}" == "1" ]]; then
            ./scripts/zephyr_module.py --twister-out module_tests.args
            if [ -s module_tests.args ]; then
              ./scripts/twister $(for p in $TARGET_PLATFORMS; do echo -n "-p $p "; done) +module_tests.args --outdir module_tests ${TWISTER_COMMON} ${WEEKLY_OPTIONS}
            fi
          fi

      - name: Print ccache stats
        if: always()
        run: |
          ccache -s -vv

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: Unit Test Results (Subset ${{ matrix.subset }})
          if-no-files-found: ignore
          path: |
            twister-out/twister.xml
            twister-out/twister.json
            module_tests/twister.xml
            testplan.json

      - if: matrix.subset == 1 && github.event_name == 'push'
        name: Save the list of Python packages
        shell: bash
        run: |
          FREEZE_FILE="frozen-requirements.txt"
          timestamp="$(date)"
          version="$(git describe --abbrev=12 --always)"
          echo -e "# Generated at $timestamp ($version)\n" > $FREEZE_FILE
          pip freeze | tee -a $FREEZE_FILE

      - if: matrix.subset == 1 && github.event_name == 'push'
        name: Upload the list of Python packages
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: Frozen PIP package set
          path: |
            frozen-requirements.txt

  twister-test-results:
    name: "Publish Unit Tests Results"
    needs:
      - twister-build
    runs-on: ubuntu-latest
    permissions:
      checks: write # to create the check run entry with Twister test results
    # the build-and-test job might be skipped, we don't need to run this job then
    if: success() || failure()

    steps:
      - name: Check out source code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: 3.12
          cache: pip
          cache-dependency-path: scripts/requirements-actions.txt

      - name: Install Python packages
        run: |
          pip install -r scripts/requirements-actions.txt --require-hashes

      - name: Download Artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          path: artifacts

      - name: Merge Test Results
        run: |
          junitparser merge artifacts/*/*/twister.xml junit.xml
          junit2html junit.xml junit.html

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: Unit Test Results
          if-no-files-found: ignore
          path: |
            junit.html
            junit.xml

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@3a74b2957438d0b6e2e61d67b05318aa25c9e6c6 # v2.20.0
        with:
          check_name: Unit Test Results
          files: "**/twister.xml"
          comment_mode: off

      - name: Analyze Twister Reports
        if: needs.twister-build.result == 'failure'
        run: |
          ./scripts/ci/twister_report_analyzer.py artifacts/*/*/twister.json --long-summary --platforms --output-md errors.md
          if [[ -s "errors.md" ]]; then
            echo '### Error Summary! ðŸš€' >> $GITHUB_STEP_SUMMARY
            cat errors.md  >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Twister Analysis Results
        if: needs.twister-build.result == 'failure'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: Twister Analysis Results
          if-no-files-found: ignore
          path: |
            twister_report_summary.json

  sanity-check:
    name: "Sanity Check with native_sim on Fixed Test Set"
    needs:
      - twister-build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Install Zephyr SDK
        run: |
          wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.16.5/zephyr-sdk-0.16.5_linux-x86_64.tar.xz
          tar xf zephyr-sdk-0.16.5_linux-x86_64.tar.xz
          mv zephyr-sdk-0.16.5 $HOME/zephyr-sdk
          $HOME/zephyr-sdk/setup.sh -t all -c

      - name: Set Zephyr SDK environment variables
        run: |
          echo "ZEPHYR_SDK_INSTALL_DIR=$HOME/zephyr-sdk" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$HOME/zephyr-sdk" >> $GITHUB_ENV
          echo "$HOME/zephyr-sdk/cmake" >> $GITHUB_PATH

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: 3.12

      - name: Install packages
        run: |
          pip install -r scripts/requirements.txt
          pip install protobuf grpcio-tools junitparser junit2html

      - name: Environment Setup
        run: |
          west init -l .
          west config --global update.narrow true
          west config manifest.group-filter -- +ci,+optional
          west update

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache gcc-multilib device-tree-compiler gperf protobuf-compiler

      - name: Run sanity check on native_sim
        run: |
          export ZEPHYR_BASE=${PWD}
          ./scripts/twister \
            -T samples/hello_world \
            -T tests/kernel/threads/thread_apis \
            -T tests/kernel/timer/timer_api \
            -T tests/kernel/fifo/fifo_api \
            -T tests/kernel/msgq/msgq_api \
            -T tests/kernel/mbox/mbox_api \
            -T tests/kernel/events/event_api \
            -T tests/kernel/interrupt \
            -p native_sim \
            --inline-logs -v --force-color --retry-failed 1

      - name: Upload results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: sanity-check-results
          path: twister-out/

  twister-status-check:
    if: always()
    name: "Check Twister Status"
    needs:
      - twister-build-prep
      - twister-build
    uses: ./.github/workflows/ready-to-merge.yml
    with:
      needs_context: ${{ toJson(needs) }}
