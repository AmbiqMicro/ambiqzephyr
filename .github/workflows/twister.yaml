name: Run tests with twister

on:
  workflow_dispatch:
    inputs:
      base:
        description: 'Base branch name'
        required: false
      device_test:
        description: 'Run device testing'
        required: true
        type: boolean
        default: false

  push:
    branches:
      - apollo510-dev
  pull_request:
    branches:
      - apollo510-dev
  schedule:
    # Run at 02:00 UTC on every Sunday
    - cron: '0 2 * * 0'

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  twister-build-prep:
    if: github.repository == github.event.pull_request.head.repo.full_name
    runs-on: [self-hosted, Linux, zephyr-ci]
    outputs:
      subset: ${{ steps.output-services.outputs.subset }}
      size: ${{ steps.output-services.outputs.size }}
      fullrun: ${{ steps.output-services.outputs.fullrun }}
    env:
      MATRIX_SIZE: 10
      PUSH_MATRIX_SIZE: 20
      WEEKLY_MATRIX_SIZE: 200
      BSIM_OUT_PATH: /data/bsim_west/bsim/
      BSIM_COMPONENTS_PATH: /data/bsim_west/bsim/components
      TESTS_PER_BUILDER: 500
      COMMIT_RANGE: ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}
      VENDOR_OPTIONS: ' --vendor ambiq'
      PLATFORM_OPTIONS: ' --platform apollo510_evb --platform apollo510_eb'
    steps:
      - name: Set event variables
        id: set-vars
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "GIT_REF=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
            echo "BASE_REF=${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV
          else
            echo "GIT_REF=${{ github.sha }}" >> $GITHUB_ENV
            # For workflow_dispatch, use input branch or default
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo "BASE_REF=${{ github.event.inputs.base || github.event.repository.default_branch }}" >> $GITHUB_ENV
            else
              echo "BASE_REF=${{ github.event.before }}" >> $GITHUB_ENV
            fi
          fi

      - name: Checkout
        run: |
          rm -rf "$GITHUB_WORKSPACE"/.??* "$GITHUB_WORKSPACE"/*
          CACHE_DIR="/data/ambiqzephyrcache/zephyrproject/zephyr"
          if [ -d "${CACHE_DIR}" ]; then
            echo "Cloning from local cache (${CACHE_DIR}) at ${GIT_REF}…"
            git clone --reference "${CACHE_DIR}" \
                      --depth 50 \
                      https://github.com/${{ github.repository }}.git "$GITHUB_WORKSPACE/zephyr"
          else
            echo "Cache not found; doing fresh shallow clone at ${GIT_REF}…"
            git clone --depth 50 \
                      https://github.com/${{ github.repository }}.git "$GITHUB_WORKSPACE/zephyr"
          fi
          cd "$GITHUB_WORKSPACE/zephyr"
          git fetch origin "${BASE_REF}"
          git fetch origin "${GIT_REF}"
          git reset --hard "${GIT_REF}"
          git clean -fdx

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: 3.12
          cache: pip
          cache-dependency-path: scripts/requirements-actions.txt

      - name: Install Python packages
        working-directory: zephyr
        run: |
          pip install -r scripts/requirements-actions.txt --require-hashes

      - name: Setup Zephyr project
        run: |
          echo "ZEPHYR_SDK_INSTALL_DIR=/opt/zephyr-sdk-0.17.2" >> $GITHUB_ENV

      - name: Environment Setup
        working-directory: zephyr
        run: |
          git config --global user.email "bot@zephyrproject.org"
          git config --global user.name "Zephyr Bot"
          rm -fr ".git/rebase-apply"
          rm -fr ".git/rebase-merge"
          git rebase origin/${BASE_REF}
          git clean -f -d
          git log  --pretty=oneline | head -n 10

          CACHE_DEP="/data/ambiqzephyrcache/zephyrproject/"
          west init -l . || true
          west config manifest.group-filter -- +ci,+optional
          west config --global update.narrow true
          west update --path-cache "${CACHE_DEP}" 2>&1 1> west.update.log || west update --path-cache "${CACHE_DEP}" 2>&1 1> west.update.log || ( rm -rf ../modules ../bootloader ../tools && west update --path-cache "${CACHE_DEP}")
          west forall -c 'git reset --hard HEAD'

      - name: Generate Test Plan with Twister
        working-directory: zephyr
        if: github.event_name == 'pull_request'
        id: test-plan
        run: |
          export ZEPHYR_BASE=${PWD}
          export ZEPHYR_TOOLCHAIN_VARIANT=zephyr
          python3 ./scripts/ci/test_plan.py -c origin/${BASE_REF}.. --no-detailed-test-id --pull-request -t $TESTS_PER_BUILDER ${VENDOR_OPTIONS} ${PLATFORM_OPTIONS}
          if [ -s .testplan ]; then
            TWISTER_NODES=$(grep -c . .testplan)
          else
            TWISTER_NODES=${MATRIX_SIZE}
          fi

          echo "TWISTER_NODES=$TWISTER_NODES"
          echo "TWISTER_NODES=${TWISTER_NODES}" >> $GITHUB_ENV

          rm -f testplan.json .testplan

      - name: Determine matrix size
        id: output-services
        run: |
          if [ "${{github.event_name}}" = "push" ]; then
            subset="[$(seq -s',' 1 ${PUSH_MATRIX_SIZE})]"
            size=${PUSH_MATRIX_SIZE}
          elif [ "${{github.event_name}}" = "pull_request" ]; then
            if [ -n "${TWISTER_NODES}" ]; then
              subset="[$(seq -s',' 1 ${TWISTER_NODES})]"
            else
              subset="[$(seq -s',' 1 ${MATRIX_SIZE})]"
            fi
            size=${TWISTER_NODES}
          elif [ "${{github.event_name}}" = "schedule" ]; then
            subset="[$(seq -s',' 1 ${WEEKLY_MATRIX_SIZE})]"
            size=${WEEKLY_MATRIX_SIZE}
          else
            size=0
          fi

          echo "subset=${subset}" >> $GITHUB_OUTPUT
          echo "size=${size}" >> $GITHUB_OUTPUT

  twister-build:
    runs-on: [self-hosted, Linux, zephyr-ci]
    needs: twister-build-prep
    if: needs.twister-build-prep.outputs.size != 0
    strategy:
      fail-fast: false
      matrix:
        subset: ${{fromJSON(needs.twister-build-prep.outputs.subset)}}
    timeout-minutes: 1440
    env:
      CCACHE_DIR: $HOME/.cache/ccache-zephyr
      CCACHE_REMOTE_STORAGE: "redis://cache-*.keydb-cache.svc.cluster.local|shards=1,2,3"
      CCACHE_REMOTE_ONLY: "true"
      CCACHE_IGNOREOPTIONS: '-specs=* --specs=*'
      BSIM_OUT_PATH: /data/bsim_west/bsim/
      BSIM_COMPONENTS_PATH: /data/bsim_west/bsim/components
      TWISTER_COMMON: ' --test-config tests/test_config_ci.yaml --no-detailed-test-id --force-color --inline-logs -v -N -M --retry-failed 3 --timeout-multiplier 2 '
      WEEKLY_OPTIONS: ' --clobber-output -M --all --show-footprint --report-filtered -j 12'
      PR_OPTIONS: ' --clobber-output --integration -j 12'
      PUSH_OPTIONS: ' --clobber-output -M --show-footprint --report-filtered -j 12'
      COMMIT_RANGE: ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}
      LLVM_TOOLCHAIN_PATH: /usr/lib/llvm-20
      VENDOR_OPTIONS: ' --vendor ambiq'
      PLATFORM_OPTIONS: ' --platform apollo510_evb --platform apollo510_eb'
      TEST_OPTIONS: ' --device-testing --hardware-map ${{ github.workspace }}/../../map.yml'
    steps:
      - name: Set event variables
        id: set-vars
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "GIT_REF=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
            echo "BASE_REF=${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV
          else
            echo "GIT_REF=${{ github.sha }}" >> $GITHUB_ENV
            # For workflow_dispatch, use input branch or default
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo "BASE_REF=${{ github.event.inputs.base || github.event.repository.default_branch }}" >> $GITHUB_ENV
            else
              echo "BASE_REF=${{ github.ref_name }}" >> $GITHUB_ENV
            fi
          fi

          # Set device testing flag
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "DEVICE_TESTING=${{ github.event.inputs.device_test }}" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" = "push" ]; then
            echo "DEVICE_TESTING=true" >> $GITHUB_ENV
          else
            echo "DEVICE_TESTING=false" >> $GITHUB_ENV
          fi

      - name: Print service information
        run: |
          echo "DEVICE_TESTING = ${DEVICE_TESTING}"
          echo "BASE_REF = ${BASE_REF}"
          echo "GIT_REF = ${GIT_REF}"

      - name: Checkout
        run: |
          CACHE_DIR="/data/ambiqzephyrcache/zephyrproject/zephyr"
          if [ -d "$GITHUB_WORKSPACE/zephyr/.git" ]; then
            echo "Re‑using existing checkout, fetching ${GIT_REF}…"
          elif [ -d "${CACHE_DIR}" ]; then
            rm -rf "$GITHUB_WORKSPACE"/.??* "$GITHUB_WORKSPACE"/*
            echo "Cloning from local cache (${CACHE_DIR}) at ${GIT_REF}…"
            git clone --reference "${CACHE_DIR}" \
                      --depth 50 \
                      https://github.com/${{ github.repository }}.git "$GITHUB_WORKSPACE/zephyr"
          else
            rm -rf "$GITHUB_WORKSPACE"/.??* "$GITHUB_WORKSPACE"/*
            echo "Cache not found; doing fresh shallow clone at ${GIT_REF}…"
            git clone --depth 50 \
                      https://github.com/${{ github.repository }}.git "$GITHUB_WORKSPACE/zephyr"
          fi

          cd "$GITHUB_WORKSPACE/zephyr"
          git fetch origin "${BASE_REF}"
          git fetch origin "${GIT_REF}"
          git reset --hard "${GIT_REF}"
          git clean -fdx

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: 3.12
          cache: pip
          cache-dependency-path: zephyr/scripts/requirements-actions.txt

      - name: Install Python packages
        working-directory: zephyr
        run: |
          pip install -r scripts/requirements-actions.txt --require-hashes
          pip install -r scripts/requirements.txt

      - name: Environment Setup
        working-directory: zephyr
        run: |
          if [ "${{github.event_name}}" = "pull_request" ]; then
            git config --global user.email "bot@zephyrproject.org"
            git config --global user.name "Zephyr Builder"
            rm -fr ".git/rebase-apply"
            rm -fr ".git/rebase-merge"
            git rebase origin/${BASE_REF}
            git clean -f -d
            git log  --pretty=oneline | head -n 10
          fi
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

          CACHE_DEP="/data/ambiqzephyrcache/zephyrproject/"

          if [ ! -d ../.west ]; then
            west init -l .
          fi
          west config manifest.group-filter -- +ci,+optional
          west config --global update.narrow true
          west update --path-cache "${CACHE_DEP}" 2>&1 1> west.update.log || west update --path-cache "${CACHE_DEP}" 2>&1 1> west.update.log || ( rm -rf ../modules ../bootloader ../tools && west update --path-cache "${CACHE_DEP}")
          west forall -c 'git reset --hard HEAD'

      - name: Check Environment
        run: |
          cmake --version
          gcc --version
          cargo --version
          #rustup target list --installed
          ls -la
          echo "github.ref: ${{ github.ref }}"
          echo "github.base_ref: ${{ github.base_ref }}"
          echo "github.ref_name: ${{ github.ref_name }}"

      - if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && env.DEVICE_TESTING == 'true') }}
        name: Run Tests with Twister (Device Testing)
        id: run_twister_device_test
        working-directory: zephyr
        run: |
          export ZEPHYR_BASE=${PWD}
          export ZEPHYR_TOOLCHAIN_VARIANT=zephyr
          python3 ./scripts/ci/test_plan.py -c origin/${BASE_REF}.. --pull-request --no-detailed-test-id ${VENDOR_OPTIONS} ${PLATFORM_OPTIONS}
          ./scripts/twister --subset ${{matrix.subset}}/${{ strategy.job-total }} --load-tests testplan.json ${TWISTER_COMMON} ${PUSH_OPTIONS} ${TEST_OPTIONS}
          if [ "${{matrix.subset}}" = "1" ]; then
            ./scripts/zephyr_module.py --twister-out module_tests.args
            if [ -s module_tests.args ]; then
              ./scripts/twister +module_tests.args --outdir module_tests ${TWISTER_COMMON} ${PUSH_OPTIONS} ${TEST_OPTIONS}
            fi
          fi

      - if: ${{ github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && env.DEVICE_TESTING != 'true') }}
        name: Run Tests with Twister (Pull Request)
        id: run_twister_pr
        working-directory: zephyr
        run: |
          rm -f testplan.json
          export ZEPHYR_BASE=${PWD}
          export ZEPHYR_TOOLCHAIN_VARIANT=zephyr
          python3 ./scripts/ci/test_plan.py -c origin/${BASE_REF}.. --pull-request --no-detailed-test-id ${VENDOR_OPTIONS} ${PLATFORM_OPTIONS}
          ./scripts/twister --subset ${{matrix.subset}}/${{ strategy.job-total }} --load-tests testplan.json ${TWISTER_COMMON} ${PR_OPTIONS} ${TEST_OPTIONS}
          if [ "${{matrix.subset}}" = "1" ]; then
            ./scripts/zephyr_module.py --twister-out module_tests.args
            if [ -s module_tests.args ]; then
              ./scripts/twister +module_tests.args --outdir module_tests ${TWISTER_COMMON} ${PR_OPTIONS} ${TEST_OPTIONS}
            fi
          fi

      - if: ${{ github.event_name == 'schedule' }}
        name: Run Tests with Twister (Weekly)
        id: run_twister_weekly
        working-directory: zephyr
        run: |
          export ZEPHYR_BASE=${PWD}
          export ZEPHYR_TOOLCHAIN_VARIANT=zephyr
          python3 ./scripts/ci/test_plan.py --no-detailed-test-id ${VENDOR_OPTIONS} ${PLATFORM_OPTIONS}
          ./scripts/twister --subset ${{matrix.subset}}/${{ strategy.job-total }} --load-tests testplan.json ${TWISTER_COMMON} ${WEEKLY_OPTIONS} ${TEST_OPTIONS}
          if [ "${{matrix.subset}}" = "1" ]; then
            ./scripts/zephyr_module.py --twister-out module_tests.args
            if [ -s module_tests.args ]; then
              ./scripts/twister +module_tests.args --outdir module_tests ${TWISTER_COMMON} ${WEEKLY_OPTIONS} ${TEST_OPTIONS}
            fi
          fi

      - name: Print ccache stats
        if: always()
        run: |
          ccache -s -vv

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: Unit Test Results (Subset ${{ matrix.subset }})
          if-no-files-found: ignore
          path: |
            zephyr/twister-out/twister.xml
            zephyr/twister-out/twister.json
            zephyr/module_tests/twister.xml
            testplan.json

      - if: matrix.subset == 1 && github.event_name == 'push'
        name: Save the list of Python packages
        shell: bash
        run: |
          FREEZE_FILE="frozen-requirements.txt"
          timestamp="$(date)"
          version="$(git describe --abbrev=12 --always)"
          echo -e "# Generated at $timestamp ($version)\n" > $FREEZE_FILE
          pip freeze | tee -a $FREEZE_FILE

      - if: matrix.subset == 1 && github.event_name == 'push'
        name: Upload the list of Python packages
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: Frozen PIP package set
          path: |
            frozen-requirements.txt

  twister-test-results:
    name: "Publish Unit Tests Results"
    needs:
      - twister-build
    runs-on: [self-hosted, Linux, zephyr-ci]
    permissions:
      checks: write # to create the check run entry with Twister test results
    # the build-and-test job might be skipped, we don't need to run this job then
    if: success() || failure()

    steps:
      - name: Set event variables
        id: set-vars
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "GIT_REF=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
            echo "BASE_REF=${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV
          else
            echo "GIT_REF=${{ github.sha }}" >> $GITHUB_ENV
            # For workflow_dispatch, use input branch or default
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo "BASE_REF=${{ github.event.inputs.base || github.event.repository.default_branch }}" >> $GITHUB_ENV
            else
              echo "BASE_REF=${{ github.ref_name }}" >> $GITHUB_ENV
            fi
          fi

      - name: Check out source code
        run: |
          CACHE_DIR="/data/ambiqzephyrcache/zephyrproject/zephyr"
          if [ -d "$GITHUB_WORKSPACE/zephyr/.git" ]; then
            echo "Re‑using existing checkout, fetching ${GIT_REF}…"
          elif [ -d "${CACHE_DIR}" ]; then
            rm -rf "$GITHUB_WORKSPACE"/.??* "$GITHUB_WORKSPACE"/*
            echo "Cloning from local cache (${CACHE_DIR}) at ${GIT_REF}…"
            git clone --reference "${CACHE_DIR}" \
                      --depth 50 \
                      https://github.com/${{ github.repository }}.git "$GITHUB_WORKSPACE/zephyr"
          else
            rm -rf "$GITHUB_WORKSPACE"/.??* "$GITHUB_WORKSPACE"/*
            echo "Cache not found; doing fresh shallow clone at ${GIT_REF}…"
            git clone --depth 50 \
                      https://github.com/${{ github.repository }}.git "$GITHUB_WORKSPACE/zephyr"
          fi

          cd "$GITHUB_WORKSPACE/zephyr"
          git fetch origin "${BASE_REF}"
          git fetch origin "${GIT_REF}"
          git reset --hard "${GIT_REF}"

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: 3.12
          cache: pip
          cache-dependency-path: scripts/requirements-actions.txt

      - name: Install Python packages
        working-directory: zephyr
        run: |
          pip install -r scripts/requirements-actions.txt --require-hashes

      - name: Download Artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          path: artifacts

      - name: Merge Test Results
        run: |
          junitparser merge artifacts/*/*/*/twister.xml junit.xml
          junit2html junit.xml junit.html

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: Unit Test Results
          if-no-files-found: ignore
          path: |
            junit.html
            junit.xml

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action/linux@3a74b2957438d0b6e2e61d67b05318aa25c9e6c6 # v2.20.0
        with:
          check_name: Unit Test Results
          files: "**/twister.xml"
          comment_mode: off

      - name: Analyze Twister Reports
        if: needs.twister-build.result == 'failure'
        run: |
          ./zephyr/scripts/ci/twister_report_analyzer.py artifacts/*/*/*/twister.json --long-summary --platforms --output-md errors.md
          if [[ -s "errors.md" ]]; then
            echo '### Error Summary! 🚀' >> $GITHUB_STEP_SUMMARY
            cat errors.md  >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Twister Analysis Results
        if: needs.twister-build.result == 'failure'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: Twister Analysis Results
          if-no-files-found: ignore
          path: |
            twister_report_summary.json

  twister-status-check:
    if: ${{ github.event_name == 'pull_request' }}
    name: "Check Twister Status"
    needs:
      - twister-build-prep
      - twister-build
    uses: ./.github/workflows/ready-to-merge.yml
    with:
      needs_context: ${{ toJson(needs) }}
