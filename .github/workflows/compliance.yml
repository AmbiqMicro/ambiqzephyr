name: Compliance Checks

on:
  pull_request:
    types:
    - edited
    - opened
    - reopened
    - synchronize
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch name'
        required: true
        default: 'apollo510L-dev'
      base:
        description: 'Base branch name'
        required: true
        default: 'main'

permissions:
  contents: read

jobs:
  check_compliance:
    runs-on: [self-hosted, Linux, zephyr-ci]
    name: Run compliance checks on patch series (PR)
    steps:
    - name: Checkout the code
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          GIT_REF="${{ github.event.pull_request.head.sha }}"
          BASE_REF="${{ github.event.pull_request.base.ref }}"
        elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          GIT_REF="${{ github.event.inputs.branch }}"
          BASE_REF="${{ github.event.inputs.base }}"
        fi
        sudo rm -rf "$GITHUB_WORKSPACE"/.??* "$GITHUB_WORKSPACE"/*
        CACHE_DIR="/data/ambiqzephyrcache/zephyrproject/zephyr"
        if [ -d "${CACHE_DIR}" ]; then
          echo "Cloning from local cache (${CACHE_DIR}) at ${GIT_REF}…"
          git clone --reference "${CACHE_DIR}" \
                    --depth 50 \
                    https://github.com/${{ github.repository }}.git "zephyr"
        else
          echo "Cache not found; doing fresh shallow clone at ${GIT_REF}…"
          git clone --depth 50 \
                    https://github.com/${{ github.repository }}.git "zephyr"
        fi
        cd "zephyr"
        git fetch origin "${BASE_REF}"
        git fetch origin "${GIT_REF}"
        git reset --hard "${GIT_REF}"
        git clean -fdx

        git config --global user.email "you@example.com"
        git config --global user.name "Your Name"
        git remote -v
        # Ensure there's no merge commits in the PR
        [[ "$(git rev-list --merges --count origin/${BASE_REF}..)" == "0" ]] || \
        (echo "::error ::Merge commits not allowed, rebase instead";false)
        rm -fr ".git/rebase-apply"
        rm -fr ".git/rebase-merge"
        git rebase origin/${BASE_REF}
        git clean -f -d
        # debug
        git log  --pretty=oneline | head -n 10

    - name: Set up Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: 3.12
        cache: pip
        cache-dependency-path: scripts/requirements-actions.txt

    - name: Install Python packages
      working-directory: zephyr
      run: |
        pip install -r scripts/requirements-actions.txt --require-hashes

    - name: west setup
      working-directory: zephyr
      run: |
        CACHE_DEP="/data/ambiqzephyrcache/zephyrproject/"
        west init -l . || true
        west config manifest.group-filter -- +ci,-optional
        west update --path-cache "${CACHE_DEP}" -o=--depth=1 -n 2>&1 1> west.update.log || west update --path-cache "${CACHE_DEP}" -o=--depth=1 -n 2>&1 1> west.update2.log

    - name: Run Compliance Tests
      working-directory: zephyr
      continue-on-error: true
      id: compliance
      run: |
        export ZEPHYR_BASE=$PWD
        # Increase rename limit to allow for large PRs
        git config diff.renameLimit 10000
        excludes="-e KconfigBasic -e SysbuildKconfigBasic -e ClangFormat"
        # The signed-off-by check for dependabot should be skipped
        if [ "${{ github.actor }}" == "dependabot[bot]" ]; then
          excludes="$excludes -e Identity"
        fi
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          BASE_REF="${{ github.event.pull_request.base.ref }}"
        elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          BASE_REF="${{ github.event.inputs.base }}"
        fi
        ./scripts/ci/check_compliance.py --annotate $excludes -c origin/${BASE_REF}..

    - name: upload-results
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      continue-on-error: true
      with:
        name: compliance.xml
        path: zephyr/compliance.xml

    - name: check-warns
      working-directory: zephyr
      run: |
        if [[ ! -s "compliance.xml" ]]; then
          exit 1;
        fi

        warns=("ClangFormat")
        files=($(./scripts/ci/check_compliance.py -l))

        for file in "${files[@]}"; do
          f="${file}.txt"
          if [[ -s $f ]]; then
            results=$(cat $f)
            results="${results//'%'/'%25'}"
            results="${results//$'\n'/'%0A'}"
            results="${results//$'\r'/'%0D'}"

            if [[ "${warns[@]}" =~ "${file}" ]]; then
              echo "::warning file=${f}::$results"
            else
              echo "::error file=${f}::$results"
              exit=1
            fi
          fi
        done

        if [ "${exit}" == "1" ]; then
          echo "Compliance error, check for error messages in the \"Run Compliance Tests\" step"
          echo "You can run this step locally with the ./scripts/ci/check_compliance.py script."
          exit 1;
        fi

        if [ "${{ steps.pr_description.outcome }}" == "failure" ]; then
          echo "PR description cannot be empty"
          exit 1;
        fi
